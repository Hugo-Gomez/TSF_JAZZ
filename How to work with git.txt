How to work with git


The structure looks like this :

MASTER ---- dev
	|        |
	|        <sub_branches>
  admin


We push in MASTER only when big tasks and important updates are done, verified and fonctionnal.

DEV is the common branch that concern the development of the website, data gestion and integration.

DEV contain sub_branches, which has the name of the current worker, in other words, it's a personnal branch.
For example, there is branches like manu_dev, raph_dev or hugo_dev.

In those subranches, we work on functionnalities, like adding a webpage or wathever. You do PERSONNAL tasks, tasks that are attribute to you only.

After a successful task due, you MUST commit on your branches and then you can keep working on your branch.
Regular commit after a task is VERY important.

To simply get modifications on the DEV branch WITHOUT merging your branch (that means that you don't need the new version of DEV, but you just wanna try the DEV version for whatever reason) : 

You are in your branch and you midified stuff, follow this : 

// You are in your branch
- git add *
- git commit -m "<your commit name>"
- git checkout dev
// You are in the dev branch
- git pull origin dev

When an important change has been done on the DEV branch and YOU NEED IT, here is what you need to do :

You are in your branch and you midified stuff, follow this : 

// You are in your branch
- git add *
- git commit -m "<your commit name>"
- git push origin <your name>_dev
- git checkout dev
// You are in the dev branch
- git pull origin dev
- git merge <your_name>_dev (it will MAYBE open vim or something, it's the merge commit, just press :wq then enter)
- git push origin dev
// You delete your branch because your branch is not updated with the dev branch
- git branch -d <your_name>_dev
// You recreate it with the old exact name and go on it
- git checkout <your_name>_dev
// Now you are on your personnal branch and you can work with the last DEV update

When merging, it's possible that conflict happens, due to the fact that two persons modified the same thing.
Here is the procedure :

- git status
// With this command, you can see in red "both modified" with the file name after
// So go to your editor, and replace, erase or keep what's between this :
// <<<<<<< HEAD
// content
// =======
// content
// >>>>>>> something like commit number or your branch

Don't forget to erase <<<<< HEAD and all the stuff generated by git.

After you did it, you must add the resolution of the conflict :

- git add * (or git add and the file(s) name)
- git commit (it will open vim or something, it's the merge commit, just press :wq then enter)
- git push origin dev

Don't forget that each time you merged your personnal branch on dev, you must delete your branch and recreate it with the same name to get the last modification and be updated, if you don't do it, you will return to the last commit of your personnal branch and you won't have the modifications of the DEV branch !

And that's it ! Have fun
